package com.gartner.search.application.conversation;

import com.gartner.search.domain.model.conversation.ConversationHistory;
import com.gartner.search.domain.model.conversation.ConversationPanel;
import com.gartner.search.model.ConversationHistoryKey;
import com.gartner.search.service.ConversationHistoryService;
import com.gartner.search.domain.model.conversation.service.RegisterNewConversationTopicService;
import com.gartner.search.domain.model.conversation.service.RetrieveConversationService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Field;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class RetrieveConversationHandlerTest {

    @Mock
    private RetrieveConversationService retrieveConversationService;

    @Mock
    private ConversationHistoryService<ConversationHistoryKey, ConversationHistory> conversationHistoryService;

    @Mock
    private RegisterNewConversationTopicService registerNewConversationTopicService;

    @InjectMocks
    private RetrieveConversationHandler retrieveConversationHandler;

    private final Long userId = 1L;
    private final Long conversationId = 100L;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testCursorHandler_ASC() {
        // Arrange
        RetrieveConversationCommand command = RetrieveConversationCommand.builder()
                .userId(userId)
                .conversationId(conversationId)
                .limit(Optional.of(3))
                .cursorId(2L)
                .sortOrder("ASC")
                .build();

        Set<ConversationHistory> cachedHistories = new LinkedHashSet<>();
        cachedHistories.add(createConversationHistoryWithId(1L));
        cachedHistories.add(createConversationHistoryWithId(2L));
        cachedHistories.add(createConversationHistoryWithId(3L));
        cachedHistories.add(createConversationHistoryWithId(4L));
        cachedHistories.add(createConversationHistoryWithId(5L));

        when(retrieveConversationService.getTotal(conversationId, userId)).thenReturn(10L);
        when(registerNewConversationTopicService.count(userId)).thenReturn(0L);
        when(conversationHistoryService.getFromCache(any())).thenReturn(cachedHistories);

        // Act
        ConversationPanel panel = retrieveConversationHandler.cursorHandler(command);

        // Assert
        assertNotNull(panel);
        assertEquals(10L, panel.getTotal());
        assertEquals(3, panel.getConversations().size());
        assertEquals(5L, panel.getNextCursorId()); // Last conversation ID in the page
    }

    @Test
    void testCursorHandler_DESC() {
        // Arrange
        RetrieveConversationCommand command = RetrieveConversationCommand.builder()
                .userId(userId)
                .conversationId(conversationId)
                .limit(Optional.of(3))
                .cursorId(5L)
                .sortOrder("DESC")
                .build();

        Set<ConversationHistory> cachedHistories = new LinkedHashSet<>();
        cachedHistories.add(createConversationHistoryWithId(1L));
        cachedHistories.add(createConversationHistoryWithId(2L));
        cachedHistories.add(createConversationHistoryWithId(3L));
        cachedHistories.add(createConversationHistoryWithId(4L));
        cachedHistories.add(createConversationHistoryWithId(5L));
        cachedHistories.add(createConversationHistoryWithId(6L));
        cachedHistories.add(createConversationHistoryWithId(7L));

        when(retrieveConversationService.getTotal(conversationId, userId)).thenReturn(10L);
        when(registerNewConversationTopicService.count(userId)).thenReturn(0L);
        when(conversationHistoryService.getFromCache(any())).thenReturn(cachedHistories);

        // Act
        ConversationPanel panel = retrieveConversationHandler.cursorHandler(command);

        // Assert
        assertNotNull(panel);
        assertEquals(10L, panel.getTotal());
        assertEquals(3, panel.getConversations().size());
        assertEquals(3L, panel.getNextCursorId()); // Third most recent conversation ID
    }

    // Utility method to create a ConversationHistory with private ID set via reflection
    private ConversationHistory createConversationHistoryWithId(Long id) {
    try {
        // Use reflection to access the private constructor
        Constructor<ConversationHistory> constructor = ConversationHistory.class.getDeclaredConstructor();
        constructor.setAccessible(true);
        ConversationHistory history = constructor.newInstance();

        // Set the private id field
        Field field = ConversationHistory.class.getDeclaredField("id");
        field.setAccessible(true);
        field.set(history, id);

        return history;
    } catch (Exception e) {
        throw new RuntimeException("Failed to create ConversationHistory with id: " + id, e);
    }
}

}
