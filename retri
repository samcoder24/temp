import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;
import java.util.List;

class YourServiceImplTest {

    @Mock
    private ChatHistoryRepository chatHistoryRepository;

    @Mock
    private EntityManager entityManager;

    @InjectMocks
    private YourServiceImpl yourService; // Replace with your service class

    private final Long conversationId = 1L;
    private final Long userId = 2L;
    private final Long cursorId = 3L;
    private final String sortOrder = "ASC";
    private final int limit = 5;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void retrieve_shouldReturnConversationHistory_whenEntitiesExist() {
        // Arrange
        ChatHistoryEntity entity = new ChatHistoryEntity(); // Or mock it if needed
        List<ChatHistoryEntity> entityList = List.of(entity);

        when(chatHistoryRepository.getDynamicQueryResults(
                any(), eq(conversationId), eq(userId), eq(200), eq(cursorId), eq(sortOrder), eq(limit)))
            .thenReturn(entityList);

        // Act
        List<ConversationHistory> result = yourService.retrieve(conversationId, userId, cursorId, sortOrder, limit);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        verify(chatHistoryRepository, times(1)).getDynamicQueryResults(any(), eq(conversationId), eq(userId), eq(200), eq(cursorId), eq(sortOrder), eq(limit));
    }

    @Test
    void retrieve_shouldThrowNotFoundException_whenEntitiesAreEmpty() {
        // Arrange
        when(chatHistoryRepository.getDynamicQueryResults(
                any(), eq(conversationId), eq(userId), eq(200), eq(cursorId), eq(sortOrder), eq(limit)))
            .thenReturn(Collections.emptyList());

        // Act & Assert
        NotFoundException exception = assertThrows(NotFoundException.class, () -> 
            yourService.retrieve(conversationId, userId, cursorId, sortOrder, limit)
        );

        assertTrue(exception.getMessage().contains(String.valueOf(conversationId)));
    }
}
