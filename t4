@SpringBootTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.ANY)
@Transactional
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class ChatHistoryRepositoryCustomImplTest {

    @Autowired
    private TestEntityManager entityManager;

    private ChatHistoryRepositoryCustomImpl chatHistoryRepo;

    @BeforeAll
    void setUp() {
        chatHistoryRepo = new ChatHistoryRepositoryCustomImpl();
    }

    @BeforeEach
    void initData() {
        // Inserting 3 mock records with different combinations
        insertEntity(1L, 1001L, 2001L, 0);
        insertEntity(2L, 1001L, 2001L, 0);
        insertEntity(3L, 1001L, 2001L, 1);
    }

    private void insertEntity(Long id, Long convId, Long userId, int responseCode) {
        ChatHistoryEntity entity = new ChatHistoryEntity();
        entity.setQuestion("Q" + id);
        entity.setAnswer("A" + id);
        entity.setConversationId(convId);
        entity.setUserId(userId);
        entity.setResponseCode(responseCode);
        entity.setTraceId("trace-" + id);
        entity.setAction("action-" + id);
        entity.setActionInput("input-" + id);
        entity.setThought("thought-" + id);
        entity.setSearchResultIds("search-" + id);
        entity.setImageSearchResultIds("imgsearch-" + id);
        entity.setAnswerImages("img-" + id);
        entity.setSources("source-" + id);
        entity.setFollowupQuestions("follow-" + id);
        entityManager.persist(entity);
    }

    @Test
    void testGetDynamicQueryResults_descendingSort_withCursor() {
        List<ChatHistoryEntity> results = chatHistoryRepo.getDynamicQueryResults(
                entityManager.getEntityManager(),
                1001L,
                2001L,
                0,
                2L,
                "DESC",
                10
        );

        assertEquals(1, results.size());
        assertTrue(results.stream().allMatch(e -> e.getId() < 2L));
    }

    @Test
    void testGetDynamicQueryResults_ascendingSort_withoutCursor() {
        List<ChatHistoryEntity> results = chatHistoryRepo.getDynamicQueryResults(
                entityManager.getEntityManager(),
                1001L,
                2001L,
                0,
                null,
                "ASC",
                10
        );

        assertEquals(2, results.size());
        assertEquals("Q1", results.get(0).getQuestion());
        assertEquals("Q2", results.get(1).getQuestion());
    }
}
